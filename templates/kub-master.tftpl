#cloud-config
users:
    - default
    - name: kroot
      primary_group: kroot
      groups: users
      lock_passwd: true
      sudo: ALL=(ALL) NOPASSWD:ALL
      ssh_authorized_keys:
        - ${pub_ssh}
        - ${worker_to_master_pub}
    - name: root
      lock_passwd: true

hostname: ${host_name}

bootcmd:
  - swapoff -a
  - sysctl -w net.ipv4.ip_forward=1
  - echo "127.0.0.1 ${host_name}" >> /etc/hosts

apt:
  sources:
    docker.list:
      source: deb [arch=amd64] https://download.docker.com/linux/ubuntu $RELEASE stable
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88

    kubernetes.list:
      source: 'deb [signed-by=$KEY_FILE]  https://pkgs.k8s.io/core:/stable:/v1.31/deb/  /'
      keyid: DE15B14486CD377B9E876E1A234654DA9A296436

package_update: true
package_upgrade: true
packages:
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - containerd.io
  - kubelet
  - kubeadm
  - kubectl

write_files:
  - path: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

  - path: /etc/kub-conf/kubeadm-conf.yaml
    content: |
      apiVersion: kubeadm.k8s.io/v1beta4
      kind: InitConfiguration
      localAPIEndpoint:
        advertiseAddress: ${ip}
        bindPort: 6443
      nodeRegistration:
        criSocket: unix:///var/run/containerd/containerd.sock
        name: ${host_name}
        taints:
          - key: "node-role.kubernetes.io/master"
            effect: "NoSchedule"
      ---
      apiVersion: kubeadm.k8s.io/v1beta4
      kind: ClusterConfiguration
      kubernetesVersion: v1.31.2
      networking:
        serviceSubnet: "10.96.0.0/16"
        podSubnet: "10.244.0.0/16"
        dnsDomain: "cluster.local"
        nodeCidrMaskSize: 26
      controllerManager:
        extraArgs:
          - name: node-cidr-mask-size
            value: "26"
      ---
      kind: KubeletConfiguration
      apiVersion: kubelet.config.k8s.io/v1beta1
      cgroupDriver: systemd

  - path: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter

runcmd:
   - sudo sysctl --system
   - sudo mkdir -p /etc/containerd
   - sudo containerd config default | sudo tee /etc/containerd/config.toml
   - sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
   - systemctl restart containerd
   - systemctl enable containerd
   - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
   - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
   - apt-mark hold kubelet kubeadm kubectl
   - systemctl enable --now kubelet
   - sudo kubeadm init --config /etc/kub-conf/kubeadm-conf.yaml > /home/kroot/init.log
   - sudo mkdir -p '/root/.kube/'
   - sudo cp -i '/etc/kubernetes/admin.conf' '/root/.kube/config'
   - sudo chown root:root /root/.kube/config
   - sudo kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/tigera-operator.yaml > /home/${user}/calico1.log
   - curl https://raw.githubusercontent.com/projectcalico/calico/v3.29.1/manifests/custom-resources.yaml -o /home/kroot/custom.yaml
   - sed -i 's/192.168.0.0\/16/10.244.0.0\/16/g' /home/kroot/custom.yaml
   - sudo kubectl create -f /home/kroot/custom.yaml > /home/${user}/calico2.log
   - sudo kubectl taint nodes --all node-role.kubernetes.io/control-plane-

   - sudo grep -A 2 "kubeadm join" /home/kroot/init.log > /tmp/worker-join.sh && sudo rm /home/kroot/init.log

